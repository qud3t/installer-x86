from hikkatl.types import Message
from .. import loader
import asyncio


@loader.tds
class AutoBonusModule(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    strings = {
        "name": "AutoBonus",
        "bonus_message": "üéÅ –ë–æ–Ω—É—Å",
        "no_chat_id": "–£–∫–∞–∂–∏—Ç–µ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "invalid_chat_id": "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "chat_id",
                None,
                "ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.",
                validator=loader.validators.TelegramID(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TelegramID –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            )
        )

    async def client_ready(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ Telegram –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."""
        self.chat_id = self.config["chat_id"]
        if self.chat_id:
            asyncio.create_task(self.bonus_loop())

    async def bonus_loop(self):
        """–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ."""
        while True:
            if not self.chat_id:
                self.log.debug("chat_id –Ω–µ –∑–∞–¥–∞–Ω. –¶–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                return

            try:
                await self._client.send_message(self.chat_id, self.strings("bonus_message"))
                self.log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ –≤ {self.chat_id}")
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã–º chat_id
                if "chat_id invalid" in str(e):
                    self.log.error(self.strings("invalid_chat_id"))
                    self.chat_id = None  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ chat_id –Ω–µ–≤–µ—Ä–Ω—ã–π
                    self.config["chat_id"] = None
                    return #–ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª

            await asyncio.sleep(60 * 60)  # –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)

    @loader.command(
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–∞—Ö",
        alias="setbonuschat"
    )
    async def bonuschat(self, message: Message):
      """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–∞—Ö"""
      args = utils.get_args_raw(message)
      if args:
        try:
          chat_id = int(args)
          self.config["chat_id"] = chat_id
          self.chat_id = chat_id #–æ–±–Ω–æ–≤–ª—è–µ–º chat_id –¥–ª—è —Ä–∞–±–æ—Ç—ã bonus_loop
          await message.edit(f"chat_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {chat_id}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
          if not asyncio.current_task().done():
            asyncio.create_task(self.bonus_loop())
        except ValueError:
          await message.edit("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        except Exception as e:
          await message.edit(f"–û—à–∏–±–∫–∞: {e}")
      else:
        if self.chat_id:
          await message.edit(f"–¢–µ–∫—É—â–∏–π chat_id: {self.chat_id}")
        else:
          await message.edit(self.strings("no_chat_id"))
